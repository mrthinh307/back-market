name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  # ============================================
  # ðŸ“¦ Build Jobs
  # ============================================
  build-client:
    name: Build Client (Next.js)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            client/.next/cache
          key: nextjs-cache-${{ runner.os }}-${{ hashFiles('client/yarn.lock') }}-${{ hashFiles('client/src/**') }}
          restore-keys: |
            nextjs-cache-${{ runner.os }}-${{ hashFiles('client/yarn.lock') }}-
            nextjs-cache-${{ runner.os }}-

      - name: Build Next.js
        working-directory: client
        run: yarn build
        env:
          NEXT_PUBLIC_SENTRY_DISABLED: 'true' # Skip Sentry in CI
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_DEV_FACEBOOK_URL: ${{ secrets.NEXT_PUBLIC_DEV_FACEBOOK_URL }}
          NEXT_PUBLIC_AUTHORITATIVE_ROLE: 'admin'

      - name: Cache Next.js build output
        if: success()
        uses: actions/cache/save@v4
        with:
          path: client/.next
          key: nextjs-build-${{ runner.os }}-${{ github.sha }}

  build-server:
    name: Build Server (NestJS)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Generate Prisma Client
        working-directory: server
        run: yarn prisma generate

      - name: Build NestJS
        working-directory: server
        run: yarn build

      - name: Cache server build output
        if: success()
        uses: actions/cache/save@v4
        with:
          path: server/dist
          key: server-build-${{ runner.os }}-${{ github.sha }}

  # ============================================
  # âœ… Type Checking
  # ============================================
  type-check:
    name: Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Generate Prisma Client
        working-directory: server
        run: yarn prisma generate

      - name: Type check client
        working-directory: client
        run: yarn check:types

      - name: Type check server
        working-directory: server
        run: yarn tsc --noEmit

  # ============================================
  # ðŸ§ª Unit Tests
  # ============================================
  unit-test-client:
    name: Unit Tests - Client
    runs-on: ubuntu-latest
    needs: [build-client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Run client unit tests
        working-directory: client
        run: yarn test --coverage
        continue-on-error: true # Allow to pass even if no tests exist

  unit-test-server:
    name: Unit Tests - Server
    runs-on: ubuntu-latest
    needs: [build-server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Generate Prisma Client
        working-directory: server
        run: yarn prisma generate

      - name: Run server unit tests
        working-directory: server
        run: yarn test --coverage
        continue-on-error: true # Allow to pass even if no tests exist

  # ============================================
  # ðŸŽ­ E2E Tests
  # ============================================
  e2e-server:
    name: E2E Tests - Server
    runs-on: ubuntu-latest
    needs: [build-server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Generate Prisma Client
        working-directory: server
        run: yarn prisma generate

      - name: Create .env.test file
        working-directory: server
        run: |
          cat > .env.test << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          PORT="8888"
          NODE_ENV="test"
          AUTHORITATIVE_ROLE="admin"
          REDIS_URL="${{ secrets.REDIS_URL }}"
          CACHE_TTL_SEC=600
          EOF

      - name: Run server E2E tests
        working-directory: server
        run: yarn test:e2e:ci
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_CALLBACK_URL: ${{ secrets.GOOGLE_CALLBACK_URL }}
          FACEBOOK_CLIENT_ID: ${{ secrets.FACEBOOK_CLIENT_ID }}
          FACEBOOK_CLIENT_SECRET: ${{ secrets.FACEBOOK_CLIENT_SECRET }}
          FACEBOOK_CALLBACK_URL: ${{ secrets.FACEBOOK_CALLBACK_URL }}

  e2e-client:
    name: E2E Tests - Client (Playwright)
    runs-on: ubuntu-latest
    needs: [build-server]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Install Playwright browsers
        working-directory: client
        run: yarn playwright install --with-deps chromium

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ hashFiles('client/yarn.lock') }}

      - name: Generate Prisma Client (for server)
        working-directory: server
        run: yarn prisma generate

      - name: Restore server build
        uses: actions/cache/restore@v4
        with:
          path: server/dist
          key: server-build-${{ runner.os }}-${{ github.sha }}
          fail-on-cache-miss: false

      - name: Build server (if cache missed)
        working-directory: server
        run: |
          if [ ! -d "dist" ]; then
            echo "Cache miss - building server..."
            yarn build
          else
            echo "Using cached server build"
          fi

      - name: Create server .env.test
        working-directory: server
        run: |
          cat > .env.test << EOF
          DATABASE_URL="${{ secrets.DATABASE_URL }}"
          JWT_SECRET="${{ secrets.JWT_SECRET }}"
          PORT="8888"
          NODE_ENV="test"
          AUTHORITATIVE_ROLE="admin"
          REDIS_URL="${{ secrets.REDIS_URL }}"
          CACHE_TTL_SEC=600
          GOOGLE_CLIENT_ID="test-google-client-id"
          GOOGLE_CLIENT_SECRET="test-google-client-secret"
          GOOGLE_CALLBACK_URL="http://localhost:8888/auth/google/callback"
          FACEBOOK_CLIENT_ID="test-facebook-client-id"
          FACEBOOK_CLIENT_SECRET="test-facebook-client-secret"
          FACEBOOK_CALLBACK_URL="http://localhost:8888/auth/facebook/callback"
          EOF

      - name: Start server in background
        working-directory: server
        run: |
          yarn start:prod &
          echo $! > server.pid
          # Wait for server to be ready
          timeout 60 bash -c 'until curl -f http://localhost:8888/health 2>/dev/null; do sleep 2; done' || exit 1
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          REDIS_URL: ${{ secrets.REDIS_URL }}
          GOOGLE_CLIENT_ID: "test-google-client-id"
          GOOGLE_CLIENT_SECRET: "test-google-client-secret"
          GOOGLE_CALLBACK_URL: "http://localhost:8888/auth/google/callback"
          FACEBOOK_CLIENT_ID: "test-facebook-client-id"
          FACEBOOK_CLIENT_SECRET: "test-facebook-client-secret"
          FACEBOOK_CALLBACK_URL: "http://localhost:8888/auth/facebook/callback"

      - name: Run Playwright E2E tests
        working-directory: client
        run: yarn test:e2e
        continue-on-error: true # Allow to pass even if no tests exist

      - name: Stop server
        if: always()
        working-directory: server
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: playwright-report
          path: client/test-results/
          retention-days: 7

  # ============================================
  # ðŸ“Š Additional Checks
  # ============================================
  unlighthouse:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    needs: [build-client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js and dependencies
        uses: ./.github/actions/setup-project
        with:
          node-version: '20.x'

      - name: Restore Next.js build cache (optional)
        uses: actions/cache/restore@v4
        with:
          path: client/.next
          key: nextjs-build-${{ runner.os }}-${{ github.sha }}
          restore-keys: |
            nextjs-build-${{ runner.os }}-
        continue-on-error: true

      - name: Build Next.js (if cache missed)
        working-directory: client
        run: |
          if [ ! -d ".next" ]; then
            echo "Cache miss - building Next.js..."
            yarn build
          else
            echo "Using cached build"
          fi
        env:
          NEXT_PUBLIC_SENTRY_DISABLED: 'true'
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_DEV_FACEBOOK_URL: ${{ secrets.NEXT_PUBLIC_DEV_FACEBOOK_URL }}
          NEXT_PUBLIC_AUTHORITATIVE_ROLE: 'admin'

      - name: Run Unlighthouse
        working-directory: client
        run: yarn test:lighthouse
        continue-on-error: true # Don't fail CI on performance issues

      - name: Upload Lighthouse report
        if: always()
        uses: actions/upload-artifact@v5
        with:
          name: lighthouse-report
          path: client/.unlighthouse/
          retention-days: 7
        continue-on-error: true
