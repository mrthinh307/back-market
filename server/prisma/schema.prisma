generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.svg"
}

// USERS & AUTHENTICATION
enum UserRole {
  user
  admin
}

model UserAuth {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique @db.VarChar(255)
  hash          String?  @map("hash") @db.VarChar(255)
  emailVerified Boolean  @default(false) @map("email_verified")
  provider      String?  @default("local")
  providerId    String?  @map("provider_id")
  role          UserRole @default(user)
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  profile      UserProfile?
  addresses    UserAddress[]
  orders       Order[]
  shoppingCart ShoppingCart?
  reviews      Review[]

  @@unique([provider, providerId])
  @@map("user_auths")
}

model UserProfile {
  id        String   @id @default(uuid()) @map("id") @db.Uuid
  authId    String   @unique @map("auth_id") @db.Uuid
  lastName  String?  @map("last_name") @db.VarChar(255)
  firstName String?  @map("first_name") @db.VarChar(255)
  phone     String?  @db.VarChar(20)
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  userAuth UserAuth @relation(fields: [authId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserAddress {
  id          String   @id @default(uuid()) @map("id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fullName    String?  @map("full_name") @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  addressLine String?  @map("address_line")
  ward        String?  @db.VarChar(100)
  district    String?  @db.VarChar(100)
  city        String?  @db.VarChar(100)
  postalCode  String?  @map("postal_code") @db.VarChar(20)
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user UserAuth @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("user_addresses")
}

// CATEGORY TREE
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  parentId  Int?     @map("parent_id")
  level     Int      @default(3)
  isLeaf    Boolean  @default(true) @map("is_leaf")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  parent             Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children           Category[]          @relation("CategoryHierarchy")
  products           Product[]
  categoryAttributes CategoryAttribute[]

  @@index([parentId])
  @@map("categories")
}

// ATTRIBUTES & VALUES
model Attribute {
  id   Int    @id @default(autoincrement())
  code String @unique @db.VarChar(100)
  name String @db.VarChar(255)

  // Relations
  values                   AttributeValue[]
  categoryAttributes       CategoryAttribute[]
  groupAttributes          GroupAttribute[]
  productVariantAttributes ProductVariantAttribute[]
  variantAttributeImages   VariantAttributeImage[]

  @@map("attributes")
}

model AttributeValue {
  id           Int    @id @default(autoincrement())
  attributeId  Int    @map("attribute_id")
  value        String @db.VarChar(255)
  displayOrder Int    @default(0) @map("display_order")

  // Relations
  attribute                Attribute                 @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  productVariantAttributes ProductVariantAttribute[]
  variantAttributeImages   VariantAttributeImage[]

  @@index([attributeId])
  @@map("attribute_values")
}

model CategoryAttribute {
  id          Int @id @default(autoincrement())
  categoryId  Int @map("category_id")
  attributeId Int @map("attribute_id")

  // Relations
  category  Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([categoryId, attributeId])
  @@index([categoryId])
  @@map("category_attributes")
}

model AttributeGroup {
  id           Int    @id @default(autoincrement())
  name         String @db.VarChar(100)
  displayOrder Int    @default(0) @map("display_order")

  // Relations
  groupAttributes GroupAttribute[]

  @@map("attribute_groups")
}

model GroupAttribute {
  groupId      Int @map("group_id")
  attributeId  Int @map("attribute_id")
  displayOrder Int @default(0) @map("display_order")

  // Relations
  group     AttributeGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  attribute Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@id([groupId, attributeId])
  @@map("group_attributes")
}

// PRODUCTS & VARIANTS
model Brand {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique @db.VarChar(100)

  // Relations
  products Product[]

  @@map("brands")
}

model Product {
  id         String   @id @default(uuid()) @db.Uuid
  name       String   @db.VarChar(255)
  categoryId Int      @map("category_id")
  brandId    String?  @map("brand_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  category Category         @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  brand    Brand?           @relation(fields: [brandId], references: [id])
  variants ProductVariant[]
  reviews  Review[]

  @@index([categoryId])
  @@index([brandId])
  @@map("products")
}

// enum ProductCondition {
//   REFURBISHED
//   NEW
//   USED
// }

model ProductVariant {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  sku       String?  @unique
  title     String?  @map("title")
  stock     Int      @map("stock")
  price     Decimal  @map("price")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  product               Product                   @relation(fields: [productId], references: [id])
  reviews               Review[]
  attributes            ProductVariantAttribute[]
  orderItems            OrderItem[]
  VariantAttributeImage VariantAttributeImage[]
  CartItem              CartItem[]

  @@map("product_variants")
}

model ProductVariantAttribute {
  id          Int    @id @default(autoincrement())
  variantId   String @map("variant_id") @db.Uuid
  attributeId Int    @map("attribute_id")
  valueId     Int    @map("value_id")

  // Relations
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attribute Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value     AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeId])
  @@index([variantId])
  @@map("product_variant_attributes")
}

model VariantAttributeImage {
  id          Int     @id @default(autoincrement())
  variantId   String  @map("variant_id") @db.Uuid
  attributeId Int     @map("attribute_id")
  valueId     Int     @map("value_id")
  sectionId   String? @map("section_id") @db.VarChar(50)
  imageUrl    String  @map("image_url")

  // Relations
  variant   ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  attribute Attribute      @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  value     AttributeValue @relation(fields: [valueId], references: [id], onDelete: Cascade)

  @@unique([variantId, attributeId, valueId, sectionId])
  @@map("variant_attribute_images")
}

model Review {
  id        String   @id @default(uuid()) @db.Uuid
  productId String   @map("product_id") @db.Uuid
  variantId String?  @map("product_variant_id") @db.Uuid
  userId    String?  @map("user_id") @db.Uuid
  rating    Int
  title     String?
  comment   String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  product Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant ProductVariant? @relation(fields: [variantId], references: [id], onDelete: Cascade)
  user    UserAuth?       @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("reviews")
}

// ORDERS
enum OrderStatus {
  pending
  processing
  shipped
  delivered
  cancelled
  refunded
}

model Order {
  id                  String      @id @default(uuid()) @map("id") @db.Uuid
  userId              String?     @map("user_id") @db.Uuid
  totalPrice          Decimal     @map("total_price") @db.Decimal(12, 2)
  status              OrderStatus @default(pending)
  shippingFullName    String?     @map("shipping_full_name") @db.VarChar(255)
  shippingPhone       String?     @map("shipping_phone") @db.VarChar(20)
  shippingAddressLine String?     @map("shipping_address_line")
  shippingWard        String?     @map("shipping_ward") @db.VarChar(100)
  shippingDistrict    String?     @map("shipping_district") @db.VarChar(100)
  shippingCity        String?     @map("shipping_city") @db.VarChar(100)
  shippingPostalCode  String?     @map("shipping_postal_code") @db.VarChar(20)
  createdAt           DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt           DateTime    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user  UserAuth?   @relation(fields: [userId], references: [id], onDelete: SetNull)
  items OrderItem[]

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id               String   @id @default(uuid()) @map("id") @db.Uuid
  orderId          String   @map("order_id") @db.Uuid
  productVariantId String   @map("product_variant_id") @db.Uuid
  quantity         Int
  unitPrice        Decimal  @map("unit_price") @db.Decimal(12, 2)
  title            String?  @map("title")
  sku              String   @map("sku")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@map("order_items")
}

// SHOPPING CART
model ShoppingCart {
  id        Int      @id @default(autoincrement())
  userId    String   @unique @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  user  UserAuth   @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@map("shopping_carts")
}

model CartItem {
  id               Int      @id @default(autoincrement())
  cartId           Int      @map("cart_id")
  productVariantId String   @map("product_variant_id") @db.Uuid
  quantity         Int      @default(1)
  isSelected       Boolean  @default(false) @map("is_selected")
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations
  cart           ShoppingCart   @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([cartId, productVariantId])
  @@map("cart_items")
}
